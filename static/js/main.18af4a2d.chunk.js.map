{"version":3,"sources":["images/ClearSkies.jpg","images/FewClouds.jpg","images/ScatterClouds.jpg","images/brokenClouds.png","images/showerRain.jpg","images/Rain.gif","images/Thunderstorm.jpg","images/Snow.jpg","images/Mist.jpg","components/tiles.jsx","components/form.jsx","components/weather.jsx","components/visual.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Tiles","react_default","a","createElement","React","Component","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","farenheit","humidity","description","error","Visual","console","log","src","ClearSkies","alt","FewClouds","ScatterClouds","BrokenClouds","ShowerRain","Rain","Thunderstorm","Snow","Mist","APIKey","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","Math","floor","main","temp","_this","setState","sys","weather","message","stop","className","tiles","components_form","this","visual","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18af4a2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ClearSkies.5e3297c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/FewClouds.45455696.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ScatterClouds.6605f1df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/brokenClouds.571809a1.png\";","module.exports = __webpack_public_path__ + \"static/media/showerRain.eeaf297b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Rain.ddb310e8.gif\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm.a71db71c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Snow.32f18b14.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Mist.04414fa6.jpg\";","import React from 'react';\n// import { ReactComponent } from '*.svg';\n\n\nclass Tiles extends React.Component {\n    render(){\n        return(\n            <div>\n                <h1>Weather Finder</h1>\n                <p>Enter a city and find out the temperature and more...</p>\n            </div> \n        )\n    }\n}\n\nexport default Tiles;","import React from 'react';\n\nconst Form = props => {\n    return(\n        <form onSubmit = { props.getWeather } >\n            <input\n                type=\"text\"\n                name=\"city\"\n                placeholder=\"City...\" >\n            </input>\n\n            <input\n                type=\"text\"\n                name=\"country\"\n                placeholder=\"Country...\" >\n            </input>\n            <button>Get Weater</button>\n            </form >\n    )\n}\n\nexport default Form;\n\n","import React from 'react';\n\n\nconst Weather = props => {\n    return(\n        <div>\n            {props.city && props.country && <p>Location: {props.city}, {props.country}</p>}\n            {props.farenheit && <p>Farenheit: {props.farenheit}Â°F</p>}\n            {props.humidity && <p>Humidity: {props.humidity}%</p>}\n            {props.description && <p>Description: {props.description}</p>}\n            {props.error && <p>Error: {props.error}</p>}\n        </div>\n    )\n}\nexport default Weather;\n\n","import React from 'react';\n\nimport ClearSkies from '../images/ClearSkies.jpg'\nimport FewClouds from '../images/FewClouds.jpg'\nimport ScatterClouds from '../images/ScatterClouds.jpg'\nimport BrokenClouds from '../images/brokenClouds.png'\nimport ShowerRain from '../images/showerRain.jpg'\nimport Rain from '../images/Rain.gif'\nimport Thunderstorm from '../images/Thunderstorm.jpg'\nimport Snow from '../images/Snow.jpg'\nimport Mist from '../images/Mist.jpg'\n\n\n\nconst Visual = props => {\n    console.log(props)\n    return(\n        <div>\n            {props.description === \"clear sky\" ? <img src={ClearSkies} alt=\"Clear Skies\" /> : null}\n            {props.description === \"few clouds\" ? <img src={FewClouds} alt=\"Few Clouds\" /> : null}\n            {props.description === \"scattered clouds\" ? <img src={ScatterClouds} alt=\"Scatter Clouds\" /> : null}\n            {props.description === \"broken clouds\" ? <img src={BrokenClouds} alt=\"Broken Clouds\" /> : null}\n            {props.description === \"shower rain\" ? <img src={ShowerRain} alt=\"Few Clouds\" /> : null}\n            {props.description === \"rain\" ? <img src={Rain} alt=\"Rain\" /> : null}\n            {props.description === \"thunderstorm\" ? <img src={Thunderstorm} alt=\"Thunderstorm\" /> : null}\n            {props.description === \"snow\" ? <img src={Snow} alt=\"Snow\" /> : null}\n            {props.description === \"mist\" ? <img src={Mist} alt=\"Mist\" /> : null}\n        </div>\n    )\n}\n\nexport default Visual;\n\n","import React from 'react';\n\nimport './App.css';\n\n\nimport Tiles from './components/tiles';\nimport Form from './components/form';\nimport Weather from './components/weather';\nimport Visual from './components/visual';\n\n\nconst APIKey = '422c35cb0b7aacd075e81aafe28f1520'\n\n// http://api.openweathermap.org/data/2.5/weather?q=San&Francisco&appid=422c35cb0b7aacd075e81aafe28f1520\n\nclass App extends React.Component {\n\n  state = {\n    farenheit: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  }\n\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    // console.log(e.target.elements.city.value)\n    let city = e.target.elements.city.value;\n    let country = e.target.elements.country.value;\n\n    let api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIKey}`)\n    let data = await api_call.json();\n    \n    console.log(data);\n    if(city && country){\n      if(data.name){\n        let farenheit = Math.floor(((data.main.temp - 273.15) * 9/5 + 32) * 100) / 100;\n        this.setState({\n          farenheit: farenheit,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: undefined,\n        })\n      } else {\n        this.setState({\n          farenheit: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: data.message,\n        })\n      }\n    } else {\n      this.setState({\n        farenheit: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter in a city and country\",\n      })\n    }\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Tiles />\n        <Form getWeather={this.getWeather}/>\n        <Weather \n          farenheit = {this.state.farenheit}\n          city = {this.state.city}\n          country = {this.state.country}\n          humidity = {this.state.humidity}\n          description = {this.state.description}\n          error = {this.state.error}\n        />\n        <Visual \n          description = {this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}