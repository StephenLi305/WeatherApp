{"version":3,"sources":["components/tiles.jsx","components/form.jsx","components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Tiles","react_default","a","createElement","className","React","Component","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","farenheit","humidity","description","icon","src","concat","alt","error","APIKey","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","console","log","Math","floor","main","temp","_this","setState","sys","weather","message","stop","tiles","components_form","this","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8582d43.chunk.js","sourcesContent":["import React from 'react';\n// import { ReactComponent } from '*.svg';\n\n\nclass Tiles extends React.Component {\n    render(){\n        return(\n            <div>\n                <h1 className=\"title-container__title\">Weather Finder</h1>\n                <p className=\"title-container__subtitle\">Enter a city and find out the temperature and more...</p>\n            </div> \n        )\n    }\n}\n\nexport default Tiles;","import React from 'react';\n\nconst Form = props => {\n    return(\n        <form onSubmit = { props.getWeather } >\n            <input\n                type=\"text\"\n                name=\"city\"\n                placeholder=\"City...\" >\n            </input>\n\n            <input\n                type=\"text\"\n                name=\"country\"\n                placeholder=\"Country...\" >\n            </input>\n            <button>Get Weater</button>\n            </form >\n    )\n}\n\nexport default Form;\n\n","import React from 'react';\n\n\nconst Weather = props => {\n    \n    return(\n        <div className=\"weather__info\">\n            {\n                props.city && props.country && <p className=\"weather__key\">Location:\n                    <span className=\"weather__value\"> {props.city}, {props.country}</span>\n                </p>\n            }\n\n            {\n                props.farenheit && <p className=\"weather__key\">Farenheit: \n                    <span className=\"weather__value\"> {props.farenheit}Â°F</span>\n                </p>\n            }\n\n            {\n                props.humidity && <p className=\"weather__key\">Humidity: \n                    <span className=\"weather__value\"> {props.humidity}% </span>\n                </p>\n            }\n\n            {\n                props.description && props.icon && <p className=\"weather__key\">Description: \n                    <span className=\"weather__value\"> {props.description}</span>\n                    <img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt=\"icon\" />\n                </p>\n            }\n            \n            {\n                props.error && <p className=\"weather__key\">Error: \n                    <span className=\"weather__value\"> {props.error}</span>\n                </p>\n            }\n\n\n        </div>\n    )\n}\nexport default Weather;\n\n","import React from 'react';\n\nimport './App.css';\n\n\nimport Tiles from './components/tiles';\nimport Form from './components/form';\nimport Weather from './components/weather';\n// import Visual from './components/visual';\n\n\nconst APIKey = '422c35cb0b7aacd075e81aafe28f1520'\n\n// http://api.openweathermap.org/data/2.5/weather?q=San&Francisco&appid=422c35cb0b7aacd075e81aafe28f1520\n\nclass App extends React.Component {\n\n  state = {\n    farenheit: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  }\n\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    // console.log(e.target.elements.city.value)\n    let city = e.target.elements.city.value;\n    let country = e.target.elements.country.value;\n\n    let api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIKey}`)\n    let data = await api_call.json();\n    \n    console.log(data);\n    if(city && country){\n      if(data.name){\n        let farenheit = Math.floor(((data.main.temp - 273.15) * 9/5 + 32) * 100) / 100;\n        this.setState({\n          farenheit: farenheit,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          icon: data.weather[0].icon,\n          error: undefined,\n        })\n      } else {\n        this.setState({\n          farenheit: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          icon: undefined,\n          error: data.message,\n        })\n      }\n    } else {\n      this.setState({\n        farenheit: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter in a city and country\",\n      })\n    }\n  }\n\n\n  render(){\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Tiles/>\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    farenheit={this.state.farenheit}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    icon={this.state.icon}\n                    error={this.state.error}\n                    />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}